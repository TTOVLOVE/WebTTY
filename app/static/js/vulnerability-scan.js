// 漏洞扫描页面JavaScript功能
class VulnerabilityScan {
    constructor() {
        this.currentScanId = null;
        this.statusCheckInterval = null;
        this.init();
    }

    init() {
        this.bindEvents();
        this.loadClients();
        this.loadScanHistory();
        this.checkCurrentScanStatus();
    }

    bindEvents() {
        // 标签页切换
        document.querySelectorAll('.nav-link').forEach(link => {
            link.addEventListener('click', (e) => {
                this.switchTab(e.target.dataset.tab);
            });
        });

        // 扫描类型变化
        document.getElementById('scanType').addEventListener('change', (e) => {
            this.toggleCustomOptions(e.target.value === 'custom');
        });

        // 扫描表单提交
        document.getElementById('scanForm').addEventListener('submit', (e) => {
            e.preventDefault();
            this.startScan();
        });

        // 停止扫描
        document.getElementById('stopScanBtn').addEventListener('click', () => {
            this.stopScan();
        });
    }

    switchTab(tabId) {
        // 更新导航标签状态
        document.querySelectorAll('.nav-link').forEach(link => {
            link.classList.remove('active');
        });
        
        const activeTab = document.querySelector(`[data-tab="${tabId}"]`);
        if (activeTab) {
            activeTab.classList.add('active');
        }

        // 显示对应内容
        document.querySelectorAll('.tab-content').forEach(content => {
            content.classList.remove('active');
        });
        
        const tabContent = document.getElementById(tabId);
        if (tabContent) {
            tabContent.classList.add('active');
        }

        // 如果切换到历史标签页，刷新历史数据
        if (tabId === 'history-tab') {
            this.loadScanHistory();
        }
    }

    toggleCustomOptions(show) {
        const customOptions = document.getElementById('customOptions');
        customOptions.style.display = show ? 'block' : 'none';
    }

    async startScan() {
        const clientId = document.getElementById('scanTarget').value;
        const scanType = document.getElementById('scanType').value;
        
        if (!clientId) {
            this.showAlert('请选择扫描目标客户端', 'warning');
            return;
        }

        // 获取自定义选项
        const options = {};
        if (scanType === 'custom') {
            options.portScan = document.getElementById('portScan').checked;
            options.serviceScan = document.getElementById('serviceScan').checked;
            options.vulnScan = document.getElementById('vulnScan').checked;
        }

        try {
            const response = await fetch('/api/vulnerability-scan/start', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    target: clientId,  // 修改参数名从client_id为target，匹配后端期望
                    scan_type: scanType,
                    options: options
                })
            });

            const data = await response.json();
            
            if (data.success) {
                this.currentScanId = data.task_id;  // 修改从scan_id为task_id，匹配后端返回
                this.showAlert('扫描已开始', 'success');
                this.updateScanControls(true);
                this.switchTab('results-tab');
                this.startStatusCheck();
            } else {
                this.showAlert(data.message || '启动扫描失败', 'error');
            }
        } catch (error) {
            console.error('启动扫描错误:', error);
            this.showAlert('网络错误，请稍后重试', 'error');
        }
    }

    async stopScan() {
        if (!this.currentScanId) return;

        try {
            const response = await fetch(`/api/vulnerability-scan/stop/${this.currentScanId}`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                }
            });

            const data = await response.json();
            
            if (data.success) {
                this.showAlert('扫描已停止', 'info');
                this.stopStatusCheck();
                this.updateScanControls(false);
            } else {
                this.showAlert(data.message || '停止扫描失败', 'error');
            }
        } catch (error) {
            console.error('停止扫描错误:', error);
            this.showAlert('网络错误，请稍后重试', 'error');
        }
    }

    startStatusCheck() {
        this.statusCheckInterval = setInterval(() => {
            this.checkScanStatus();
        }, 2000); // 每2秒检查一次状态
    }

    stopStatusCheck() {
        if (this.statusCheckInterval) {
            clearInterval(this.statusCheckInterval);
            this.statusCheckInterval = null;
        }
    }

    async checkCurrentScanStatus() {
        try {
            const response = await fetch('/api/vulnerability-scan/status/current');
            const data = await response.json();
            
            if (data.success && data.scan_id) {
                this.currentScanId = data.scan_id;
                this.updateScanStatus(data);
                this.updateScanControls(data.status === 'running');
                
                if (data.status === 'running') {
                    this.startStatusCheck();
                }
            } else {
                this.showNoActiveScan();
            }
        } catch (error) {
            console.error('检查扫描状态错误:', error);
            this.showNoActiveScan();
        }
    }

    async checkScanStatus() {
        if (!this.currentScanId) return;

        try {
            const response = await fetch(`/api/vulnerability-scan/status/${this.currentScanId}`);
            const data = await response.json();
            
            if (data.success) {
                this.updateScanStatus(data);
                
                if (data.status === 'completed' || data.status === 'failed' || data.status === 'stopped') {
                    this.stopStatusCheck();
                    this.updateScanControls(false);
                    
                    if (data.status === 'completed') {
                        this.displayVulnerabilities(data.vulnerabilities || []);
                    }
                }
            }
        } catch (error) {
            console.error('检查扫描状态错误:', error);
        }
    }

    updateScanStatus(data) {
        const statusContainer = document.getElementById('currentScanStatus');
        const noActiveScan = document.getElementById('noActiveScan');
        const statusIndicator = document.getElementById('statusIndicator');
        const statusText = document.getElementById('statusText');
        const progressBar = document.getElementById('progressBar');
        const progressText = document.getElementById('progressText');
        const scanMessage = document.getElementById('scanMessage');

        statusContainer.style.display = 'block';
        noActiveScan.style.display = 'none';

        // 更新状态指示器
        statusIndicator.className = `status-indicator status-${data.status}`;
        
        // 更新状态文本
        const statusMessages = {
            'running': '正在扫描...',
            'completed': '扫描完成',
            'failed': '扫描失败',
            'stopped': '扫描已停止'
        };
        statusText.textContent = statusMessages[data.status] || data.status;

        // 更新进度条
        const progress = data.progress || 0;
        progressBar.style.width = `${progress}%`;
        progressText.textContent = `${progress}%`;

        // 更新扫描消息
        scanMessage.textContent = data.message || '';
    }

    showNoActiveScan() {
        document.getElementById('currentScanStatus').style.display = 'none';
        document.getElementById('noActiveScan').style.display = 'block';
        document.getElementById('vulnerabilityResults').style.display = 'none';
    }

    updateScanControls(isScanning) {
        const startBtn = document.getElementById('startScanBtn');
        const stopBtn = document.getElementById('stopScanBtn');
        const scanForm = document.getElementById('scanForm');

        if (isScanning) {
            startBtn.style.display = 'none';
            stopBtn.style.display = 'inline-block';
            scanForm.querySelectorAll('input, select').forEach(el => el.disabled = true);
        } else {
            startBtn.style.display = 'inline-block';
            stopBtn.style.display = 'none';
            scanForm.querySelectorAll('input, select').forEach(el => el.disabled = false);
        }
    }

    displayVulnerabilities(vulnerabilities) {
        const resultsContainer = document.getElementById('vulnerabilityResults');
        const vulnerabilityList = document.getElementById('vulnerabilityList');

        if (vulnerabilities.length === 0) {
            vulnerabilityList.innerHTML = `
                <div class="text-center text-success">
                    <i class="fas fa-shield-alt fa-3x mb-3"></i>
                    <h4>未发现安全漏洞</h4>
                    <p>目标系统通过了安全扫描检测</p>
                </div>
            `;
        } else {
            vulnerabilityList.innerHTML = vulnerabilities.map(vuln => `
                <div class="vulnerability-item ${vuln.severity}">
                    <div class="d-flex justify-content-between align-items-start">
                        <div>
                            <h5>${vuln.title}</h5>
                            <p class="text-muted mb-2">${vuln.description}</p>
                            <small><strong>端口:</strong> ${vuln.port} | <strong>服务:</strong> ${vuln.service}</small>
                        </div>
                        <span class="severity-badge severity-${vuln.severity}">${vuln.severity}</span>
                    </div>
                </div>
            `).join('');
        }

        resultsContainer.style.display = 'block';
    }

    async loadScanHistory() {
        const historyContent = document.getElementById('historyContent');
        
        try {
            const response = await fetch('/api/vulnerability-scan/history');
            const data = await response.json();
            
            if (data.success && data.history.length > 0) {
                historyContent.innerHTML = `
                    <table class="history-table">
                        <thead>
                            <tr>
                                <th>扫描时间</th>
                                <th>目标</th>
                                <th>类型</th>
                                <th>状态</th>
                                <th>漏洞数量</th>
                                <th>操作</th>
                            </tr>
                        </thead>
                        <tbody>
                            ${data.history.map(scan => `
                                <tr>
                                    <td>${new Date(scan.start_time).toLocaleString()}</td>
                                    <td>${scan.target_name || scan.target}</td>
                                    <td>${this.getScanTypeText(scan.scan_type)}</td>
                                    <td>
                                        <span class="status-indicator status-${scan.status}"></span>
                                        ${this.getStatusText(scan.status)}
                                    </td>
                                    <td>${scan.results ? scan.results.length : 0}</td>
                                    <td>
                                        <button class="btn btn-sm btn-outline-primary" onclick="vulnScan.viewScanDetails('${scan.task_id}')">
                                            查看详情
                                        </button>
                                    </td>
                                </tr>
                            `).join('')}
                        </tbody>
                    </table>
                `;
            } else {
                historyContent.innerHTML = `
                    <div class="text-center text-muted">
                        <i class="fas fa-history fa-3x mb-3"></i>
                        <p>暂无扫描历史记录</p>
                    </div>
                `;
            }
        } catch (error) {
            console.error('加载扫描历史错误:', error);
            historyContent.innerHTML = `
                <div class="text-center text-danger">
                    <i class="fas fa-exclamation-triangle fa-3x mb-3"></i>
                    <p>加载扫描历史失败</p>
                </div>
            `;
        }
    }

    getScanTypeText(type) {
        const types = {
            'basic': '基础扫描',
            'comprehensive': '全面扫描',
            'custom': '自定义扫描'
        };
        return types[type] || type;
    }

    getStatusText(status) {
        const statuses = {
            'running': '运行中',
            'completed': '已完成',
            'failed': '失败',
            'stopped': '已停止'
        };
        return statuses[status] || status;
    }

    async viewScanDetails(scanId) {
        try {
            const response = await fetch(`/api/vulnerability-scan/details/${scanId}`);
            const data = await response.json();
            
            if (data.success) {
                this.showScanDetailsModal(data.details);
            } else {
                this.showAlert(data.message || '获取扫描详情失败', 'error');
            }
        } catch (error) {
            console.error('获取扫描详情错误:', error);
            this.showAlert('获取扫描详情失败', 'error');
        }
    }

    showScanDetailsModal(details) {
        // 创建模态框HTML
        const modalHtml = `
            <div class="modal fade" id="scanDetailsModal" tabindex="-1" role="dialog">
                <div class="modal-dialog modal-lg" role="document">
                    <div class="modal-content">
                        <div class="modal-header">
                            <h5 class="modal-title">
                                <i class="fas fa-search"></i> 扫描详情 - ${details.target}
                            </h5>
                            <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                        </div>
                        <div class="modal-body">
                            <div class="row">
                                <div class="col-md-6">
                                    <h6><i class="fas fa-info-circle"></i> 基本信息</h6>
                                    <table class="table table-sm">
                                        <tr>
                                            <td><strong>扫描目标:</strong></td>
                                            <td>${details.target}</td>
                                        </tr>
                                        <tr>
                                            <td><strong>扫描类型:</strong></td>
                                            <td>${this.getScanTypeText(details.scan_type)}</td>
                                        </tr>
                                        <tr>
                                            <td><strong>开始时间:</strong></td>
                                            <td>${new Date(details.start_time).toLocaleString()}</td>
                                        </tr>
                                        ${details.end_time ? `
                                        <tr>
                                            <td><strong>结束时间:</strong></td>
                                            <td>${new Date(details.end_time).toLocaleString()}</td>
                                        </tr>
                                        ` : ''}
                                        <tr>
                                            <td><strong>状态:</strong></td>
                                            <td>
                                                <span class="status-indicator status-${details.status}"></span>
                                                ${this.getStatusText(details.status)}
                                            </td>
                                        </tr>
                                        <tr>
                                            <td><strong>进度:</strong></td>
                                            <td>${details.progress}%</td>
                                        </tr>
                                    </table>
                                </div>
                                <div class="col-md-6">
                                    <h6><i class="fas fa-chart-pie"></i> 扫描统计</h6>
                                    <div class="scan-stats">
                                        <div class="stat-item">
                                            <span class="stat-label">发现漏洞:</span>
                                            <span class="stat-value">${details.results.length}</span>
                                        </div>
                                        <div class="stat-item">
                                            <span class="stat-label">高危漏洞:</span>
                                            <span class="stat-value text-danger">${details.results.filter(r => r.severity === 'high').length}</span>
                                        </div>
                                        <div class="stat-item">
                                            <span class="stat-label">中危漏洞:</span>
                                            <span class="stat-value text-warning">${details.results.filter(r => r.severity === 'medium').length}</span>
                                        </div>
                                        <div class="stat-item">
                                            <span class="stat-label">低危漏洞:</span>
                                            <span class="stat-value text-success">${details.results.filter(r => r.severity === 'low').length}</span>
                                        </div>
                                    </div>
                                </div>
                            </div>
                            
                            ${details.results.length > 0 ? `
                            <hr>
                            <h6><i class="fas fa-bug"></i> 发现的漏洞</h6>
                            <div class="vulnerability-list">
                                ${details.results.map(vuln => `
                                    <div class="vulnerability-item ${vuln.severity}">
                                        <div class="d-flex justify-content-between align-items-start">
                                            <div>
                                                <h6 class="mb-1">
                                                    ${vuln.vulnerability}
                                                    <span class="severity-badge severity-${vuln.severity}">${vuln.severity}</span>
                                                </h6>
                                                <p class="mb-1">${vuln.description}</p>
                                                <small class="text-muted">位置: ${vuln.location}</small>
                                            </div>
                                        </div>
                                        <div class="mt-2">
                                            <strong>修复建议:</strong> ${vuln.recommendation}
                                        </div>
                                    </div>
                                `).join('')}
                            </div>
                            ` : '<p class="text-muted">未发现安全漏洞</p>'}
                        </div>
                        <div class="modal-footer">
                            <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">关闭</button>
                        </div>
                    </div>
                </div>
            </div>
        `;
        
        // 移除已存在的模态框
        const existingModal = document.getElementById('scanDetailsModal');
        if (existingModal) {
            existingModal.remove();
        }
        
        // 添加新模态框到页面
        document.body.insertAdjacentHTML('beforeend', modalHtml);
        
        // 显示模态框
        const modal = new bootstrap.Modal(document.getElementById('scanDetailsModal'));
        modal.show();
        
        // 模态框关闭后清理
        document.getElementById('scanDetailsModal').addEventListener('hidden.bs.modal', function() {
            this.remove();
        });
    }

    async loadClients() {
        try {
            const response = await fetch('/api/vulnerability-scan/clients');
            const data = await response.json();
            
            const selectElement = document.getElementById('scanTarget');
            
            if (data.success && data.clients.length > 0) {
                selectElement.innerHTML = '<option value="">请选择扫描目标客户端</option>' +
                    data.clients.map(client => 
                        `<option value="${client.id}">${client.display_name} (${client.ip})</option>`
                    ).join('');
            } else {
                selectElement.innerHTML = '<option value="">暂无可用客户端</option>';
            }
        } catch (error) {
            console.error('加载客户端列表错误:', error);
            const selectElement = document.getElementById('scanTarget');
            selectElement.innerHTML = '<option value="">加载客户端失败</option>';
        }
    }

    getScanTypeText(scanType) {
        const types = {
            'comprehensive': '全面扫描',
            'basic': '基础扫描'
        };
        return types[scanType] || scanType;
    }

    getStatusText(status) {
        const statuses = {
            'pending': '等待中',
            'running': '扫描中',
            'completed': '已完成',
            'failed': '失败',
            'cancelled': '已取消'
        };
        return statuses[status] || status;
    }
    showAlert(message, type = 'info') {
        // 创建提示框
        const alertDiv = document.createElement('div');
        alertDiv.className = `alert alert-${type === 'error' ? 'danger' : type} alert-dismissible fade show`;
        alertDiv.innerHTML = `
            ${message}
            <button type="button" class="close" data-dismiss="alert">
                <span>&times;</span>
            </button>
        `;

        // 插入到页面顶部
        const container = document.querySelector('.container-fluid');
        container.insertBefore(alertDiv, container.firstChild);

        // 3秒后自动消失
        setTimeout(() => {
            if (alertDiv.parentNode) {
                alertDiv.remove();
            }
        }, 3000);
    }
}

// 页面加载完成后初始化
document.addEventListener('DOMContentLoaded', function() {
    window.vulnScan = new VulnerabilityScan();
});