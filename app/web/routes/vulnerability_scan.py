from flask import Blueprint, render_template, request, jsonify, current_app
from flask_login import login_required, current_user
import json
import subprocess
import threading
import time
from datetime import datetime

vulnerability_scan_bp = Blueprint('vulnerability_scan', __name__)

# 存储扫描任务状态
scan_tasks = {}

@vulnerability_scan_bp.route('/vulnerability-scan')
@login_required
def vulnerability_scan_page():
    return render_template('dashboard/vulnerability_scan.html')

@vulnerability_scan_bp.route('/api/vulnerability-scan/clients')
@login_required
def get_clients_for_scan():
    """获取可用于扫描的客户端列表（带用户隔离）"""
    try:
        from ...services import client_manager
        from ...models import Client
        
        print(f"[漏洞扫描] 用户 {current_user.id}({current_user.username}) 请求客户端列表")
        print(f"[漏洞扫描] 用户是否为超级管理员: {current_user.is_super_admin()}")
        
        # 根据用户权限获取客户端（与sockets.py保持一致的权限控制）
        if current_user.is_authenticated:
            if current_user.is_super_admin():
                # 超级管理员可以查看所有客户端
                query = Client.query.all()
                print(f"[漏洞扫描] 超级管理员查询所有客户端，数据库中共有 {len(query)} 个客户端")
            else:
                # 普通用户只能查看自己的客户端
                query = Client.query.filter_by(owner_id=current_user.id).all()
                print(f"[漏洞扫描] 普通用户查询自己的客户端，数据库中有 {len(query)} 个属于用户 {current_user.id} 的客户端")
        else:
            query = []
            print("[漏洞扫描] 用户未认证")

        # 从数据库加载客户端
        db_clients = {c.id: c for c in query}
        print(f"[漏洞扫描] 数据库客户端映射: {list(db_clients.keys())}")
        
        # 获取在线客户端信息
        # 直接从services.client_manager模块导入
        from ...services.client_manager import client_info as manager_client_info
        print(f"[漏洞扫描] 客户端管理器中的在线客户端: {list(manager_client_info.keys())}")
        for cid, info in manager_client_info.items():
            print(f"[漏洞扫描] 客户端 {cid} 信息: db_client_id={info.get('db_client_id')}, addr={info.get('addr')}, user={info.get('user')}")
        
        # 获取在线客户端信息（仅返回当前用户有权限的客户端）
        clients_list = []
        for client_id, client_info in manager_client_info.items():
            db_client_id = client_info.get('db_client_id')
            print(f"[漏洞扫描] 处理客户端 {client_id}, db_client_id={db_client_id}")
            
            # 检查此在线客户端是否应显示给当前用户
            if db_client_id in db_clients:
                c = db_clients[db_client_id]
                print(f"[漏洞扫描] 找到数据库客户端 {db_client_id}, owner_id={c.owner_id}")
                
                # 再次检查权限（双重保险）
                if current_user.is_authenticated and current_user.can_view_client(c):
                    print(f"[漏洞扫描] 用户有权限查看客户端 {client_id}")
                    
                    # 获取客户端显示名称
                    display_name = c.hostname or client_info.get('hostname') or client_info.get('user') or f'客户端 {client_id}'
                    
                    # 获取IP地址
                    addr = client_info.get('addr', '')
                    if isinstance(addr, (list, tuple)) and len(addr) > 0:
                        ip_address = str(addr[0])
                    else:
                        ip_address = str(addr) if addr else c.ip_address or '未知'
                    
                    client_data = {
                        'id': client_id,
                        'name': display_name,
                        'display_name': display_name,  # 添加前端期望的display_name字段
                        'ip': ip_address,
                        'user': client_info.get('user', '未知'),
                        'os': client_info.get('os', c.os_type or '未知'),
                        'hostname': c.hostname or client_info.get('hostname', '未知'),
                        'owner_id': c.owner_id  # 添加所有者信息用于调试
                    }
                    clients_list.append(client_data)
                    print(f"[漏洞扫描] 添加客户端到列表: {client_data}")
                else:
                    print(f"[漏洞扫描] 用户无权限查看客户端 {client_id}")
            else:
                print(f"[漏洞扫描] 客户端 {client_id} 的 db_client_id {db_client_id} 不在用户权限范围内")
        
        print(f"[漏洞扫描] 最终返回 {len(clients_list)} 个客户端")
        
        return jsonify({
            'success': True,
            'clients': clients_list
        })
        
    except Exception as e:
        print(f"[漏洞扫描] 获取客户端列表失败: {str(e)}")
        import traceback
        traceback.print_exc()
        return jsonify({'success': False, 'message': f'获取客户端列表失败: {str(e)}'})

@vulnerability_scan_bp.route('/api/vulnerability-scan/start', methods=['POST'])
@login_required
def start_vulnerability_scan():
    """启动漏洞扫描"""
    try:
        data = request.get_json()
        target_client_id = data.get('target', '')
        scan_type = data.get('scan_type', 'basic')
        
        if not target_client_id:
            return jsonify({'success': False, 'message': '请选择扫描目标客户端'})
        
        # 验证客户端是否在线
        from ...services import client_manager
        from ...models import Client
        
        if target_client_id not in client_manager.client_info:
            return jsonify({'success': False, 'message': '选择的客户端不在线'})
        
        client_info = client_manager.client_info[target_client_id]
        db_client_id = client_info.get('db_client_id')
        
        # 验证用户权限：确保用户只能扫描自己的客户端
        if db_client_id:
            client = Client.query.get(db_client_id)
            if not client or not current_user.can_view_client(client):
                return jsonify({'success': False, 'message': '您没有权限扫描此客户端'})
        else:
            return jsonify({'success': False, 'message': '客户端信息不完整，无法进行扫描'})
        
        target_name = client.hostname or client_info.get('hostname') or client_info.get('user') or f'客户端 {target_client_id}'
        
        # 生成任务ID
        task_id = f"scan_{int(time.time())}"
        
        # 初始化任务状态
        scan_tasks[task_id] = {
            'status': 'running',
            'progress': 0,
            'target': target_name,
            'target_client_id': target_client_id,
            'scan_type': scan_type,
            'start_time': datetime.now().isoformat(),
            'results': [],
            'message': '正在初始化扫描...',
            'user_id': current_user.id  # 添加用户ID，确保任务隔离
        }
        
        # 启动扫描线程
        scan_thread = threading.Thread(target=perform_scan, args=(task_id, target_client_id, target_name, scan_type))
        scan_thread.daemon = True
        scan_thread.start()
        
        return jsonify({
            'success': True,
            'task_id': task_id,
            'message': '扫描任务已启动'
        })
        
    except Exception as e:
        current_app.logger.error(f"启动漏洞扫描失败: {str(e)}")
        return jsonify({'success': False, 'message': f'启动扫描失败: {str(e)}'})

@vulnerability_scan_bp.route('/api/vulnerability-scan/status/<task_id>')
@login_required
def get_scan_status(task_id):
    """获取扫描状态"""
    try:
        if task_id not in scan_tasks:
            return jsonify({'success': False, 'message': '扫描任务不存在'})
        
        task = scan_tasks[task_id]
        
        # 验证用户权限：用户只能查看自己的扫描任务
        if task.get('user_id') != current_user.id and not current_user.is_super_admin():
            return jsonify({'success': False, 'message': '您没有权限查看此扫描任务'})
        
        return jsonify({
            'success': True,
            'status': task['status'],
            'progress': task['progress'],
            'message': task['message'],
            'results': task.get('results', [])
        })
        
    except Exception as e:
        current_app.logger.error(f"获取扫描状态失败: {str(e)}")
        return jsonify({'success': False, 'message': f'获取状态失败: {str(e)}'})

@vulnerability_scan_bp.route('/api/vulnerability-scan/stop/<task_id>', methods=['POST'])
@login_required
def stop_scan(task_id):
    """停止扫描"""
    try:
        if task_id not in scan_tasks:
            return jsonify({'success': False, 'message': '扫描任务不存在'})
        
        task = scan_tasks[task_id]
        
        # 验证用户权限：用户只能停止自己的扫描任务
        if task.get('user_id') != current_user.id and not current_user.is_super_admin():
            return jsonify({'success': False, 'message': '您没有权限停止此扫描任务'})
        
        task['status'] = 'stopped'
        task['message'] = '扫描已被用户停止'
        
        return jsonify({
            'success': True,
            'message': '扫描已停止'
        })
        
    except Exception as e:
        current_app.logger.error(f"停止扫描失败: {str(e)}")
        return jsonify({'success': False, 'message': f'停止扫描失败: {str(e)}'})

@vulnerability_scan_bp.route('/api/vulnerability-scan/history')
@login_required
def get_scan_history():
    """获取扫描历史（仅返回当前用户的扫描记录）"""
    try:
        # 过滤出当前用户的扫描任务
        user_tasks = []
        for task_id, task in scan_tasks.items():
            # 只返回当前用户的任务，或者超级管理员可以看到所有任务
            if task.get('user_id') == current_user.id or current_user.is_super_admin():
                task_copy = dict(task)
                task_copy['task_id'] = task_id
                user_tasks.append(task_copy)
        
        # 按开始时间倒序排列
        user_tasks.sort(key=lambda x: x.get('start_time', ''), reverse=True)
        
        return jsonify({
            'success': True,
            'history': user_tasks
        })
        
    except Exception as e:
        current_app.logger.error(f"获取扫描历史失败: {str(e)}")
        return jsonify({'success': False, 'message': f'获取历史失败: {str(e)}'})

@vulnerability_scan_bp.route('/api/vulnerability-scan/status/current')
@login_required
def get_current_scan_status():
    """获取当前正在运行的扫描状态（仅返回当前用户的扫描任务）"""
    try:
        # 查找当前用户正在运行的扫描任务
        for task_id, task in scan_tasks.items():
            if (task['status'] == 'running' and 
                (task.get('user_id') == current_user.id or current_user.is_super_admin())):
                return jsonify({
                    'success': True,
                    'scan_id': task_id,
                    'status': task['status'],
                    'progress': task['progress'],
                    'message': task['message'],
                    'target': task['target']
                })
        
        # 没有正在运行的扫描
        return jsonify({
            'success': False,
            'message': '当前没有正在运行的扫描'
        })
        
    except Exception as e:
        current_app.logger.error(f"获取当前扫描状态失败: {str(e)}")
        return jsonify({'success': False, 'message': f'获取状态失败: {str(e)}'})

@vulnerability_scan_bp.route('/api/vulnerability-scan/details/<task_id>')
@login_required
def get_scan_details(task_id):
    """获取扫描详情"""
    try:
        if task_id not in scan_tasks:
            return jsonify({'success': False, 'message': '扫描任务不存在'})
        
        task = scan_tasks[task_id]
        
        # 权限检查：只能查看自己的扫描任务
        if task.get('user_id') != current_user.id and not current_user.is_super_admin():
            return jsonify({'success': False, 'message': '您没有权限查看此扫描详情'})
        
        return jsonify({
            'success': True,
            'details': {
                'task_id': task_id,
                'target': task['target'],
                'target_client_id': task['target_client_id'],
                'scan_type': task['scan_type'],
                'status': task['status'],
                'progress': task['progress'],
                'start_time': task['start_time'],
                'end_time': task.get('end_time'),
                'message': task['message'],
                'results': task.get('results', [])
            }
        })
        
    except Exception as e:
        current_app.logger.error(f"获取扫描详情失败: {str(e)}")
        return jsonify({'success': False, 'message': f'获取详情失败: {str(e)}'})

def perform_scan(task_id, target_client_id, target_name, scan_type):
    """执行扫描任务"""
    try:
        task = scan_tasks[task_id]
        
        # 模拟扫描过程
        scan_steps = [
            {'step': '连接客户端', 'progress': 10},
            {'step': '端口扫描', 'progress': 30},
            {'step': '服务识别', 'progress': 50},
            {'step': '漏洞检测', 'progress': 70},
            {'step': '结果分析', 'progress': 90},
            {'step': '生成报告', 'progress': 100}
        ]
        
        results = []
        
        for step_info in scan_steps:
            if task['status'] == 'stopped':
                break
                
            task['message'] = f"正在执行: {step_info['step']}"
            task['progress'] = step_info['progress']
            
            # 模拟扫描时间
            time.sleep(2)
            
            # 模拟发现漏洞
            if step_info['step'] == '漏洞检测':
                if scan_type == 'comprehensive':
                    results.extend([
                        {
                            'vulnerability': 'SQL注入漏洞',
                            'severity': 'high',
                            'description': f'在客户端 {target_name} 上发现潜在的SQL注入点',
                            'location': f'{target_name}/login.php',
                            'recommendation': '使用参数化查询'
                        },
                        {
                            'vulnerability': 'XSS漏洞',
                            'severity': 'medium',
                            'description': f'在客户端 {target_name} 上发现跨站脚本攻击漏洞',
                            'location': f'{target_name}/search.php',
                            'recommendation': '对用户输入进行过滤和转义'
                        }
                    ])
                else:
                    results.append({
                        'vulnerability': '端口开放',
                        'severity': 'low',
                        'description': f'在客户端 {target_name} 上发现开放的服务端口',
                        'location': f'{target_name}:22,80,443',
                        'recommendation': '关闭不必要的端口'
                    })
        
        if task['status'] != 'stopped':
            task['status'] = 'completed'
            task['progress'] = 100
            task['message'] = '扫描完成'
            task['results'] = results
            task['end_time'] = datetime.now().isoformat()
        
    except Exception as e:
        task['status'] = 'failed'
        task['message'] = f'扫描失败: {str(e)}'
        current_app.logger.error(f"扫描任务执行失败: {str(e)}")