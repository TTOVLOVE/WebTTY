from flask import Blueprint, render_template, request, jsonify, current_app
from flask_login import login_required, current_user
import json
import subprocess
import threading
import time
from datetime import datetime

vulnerability_scan_bp = Blueprint('vulnerability_scan', __name__)

# 存储扫描任务状态
scan_tasks = {}

@vulnerability_scan_bp.route('/vulnerability-scan')
@login_required
def vulnerability_scan_page():
    """漏洞扫描页面"""
    return render_template('dashboard/vulnerability_scan.html')

@vulnerability_scan_bp.route('/api/vulnerability-scan/clients')
@login_required
def get_clients_for_scan():
    """获取可用于扫描的客户端列表"""
    try:
        from services import client_manager
        clients = {}
        
        # 获取在线客户端信息
        for client_id, client_info in client_manager.client_info.items():
            # 获取客户端显示名称
            display_name = client_info.get('hostname') or client_info.get('user') or f'客户端 {client_id}'
            
            # 获取IP地址
            addr = client_info.get('addr', '')
            if isinstance(addr, (list, tuple)) and len(addr) > 0:
                ip_address = str(addr[0])
            else:
                ip_address = str(addr) if addr else '未知'
            
            clients[client_id] = {
                'id': client_id,
                'name': display_name,
                'ip': ip_address,
                'user': client_info.get('user', '未知'),
                'os': client_info.get('os', '未知'),
                'hostname': client_info.get('hostname', '未知')
            }
        
        return jsonify({
            'success': True,
            'clients': clients
        })
        
    except Exception as e:
        current_app.logger.error(f"获取客户端列表失败: {str(e)}")
        return jsonify({'success': False, 'message': f'获取客户端列表失败: {str(e)}'})

@vulnerability_scan_bp.route('/api/vulnerability-scan/start', methods=['POST'])
@login_required
def start_vulnerability_scan():
    """启动漏洞扫描"""
    try:
        data = request.get_json()
        target_client_id = data.get('target', '')
        scan_type = data.get('scan_type', 'basic')
        
        if not target_client_id:
            return jsonify({'success': False, 'message': '请选择扫描目标客户端'})
        
        # 验证客户端是否在线
        from services import client_manager
        if target_client_id not in client_manager.client_info:
            return jsonify({'success': False, 'message': '选择的客户端不在线'})
        
        client_info = client_manager.client_info[target_client_id]
        target_name = client_info.get('hostname') or client_info.get('user') or f'客户端 {target_client_id}'
        
        # 生成任务ID
        task_id = f"scan_{int(time.time())}"
        
        # 初始化任务状态
        scan_tasks[task_id] = {
            'status': 'running',
            'progress': 0,
            'target': target_name,
            'target_client_id': target_client_id,
            'scan_type': scan_type,
            'start_time': datetime.now().isoformat(),
            'results': [],
            'message': '正在初始化扫描...'
        }
        
        # 启动扫描线程
        scan_thread = threading.Thread(target=perform_scan, args=(task_id, target_client_id, target_name, scan_type))
        scan_thread.daemon = True
        scan_thread.start()
        
        return jsonify({
            'success': True,
            'task_id': task_id,
            'message': '扫描任务已启动'
        })
        
    except Exception as e:
        current_app.logger.error(f"启动漏洞扫描失败: {str(e)}")
        return jsonify({'success': False, 'message': f'启动扫描失败: {str(e)}'})

@vulnerability_scan_bp.route('/api/vulnerability-scan/status/<task_id>')
@login_required
def get_scan_status(task_id):
    """获取扫描状态"""
    try:
        if task_id not in scan_tasks:
            return jsonify({'success': False, 'message': '任务不存在'})
        
        task = scan_tasks[task_id]
        return jsonify({
            'success': True,
            'task': task
        })
        
    except Exception as e:
        current_app.logger.error(f"获取扫描状态失败: {str(e)}")
        return jsonify({'success': False, 'message': f'获取状态失败: {str(e)}'})

@vulnerability_scan_bp.route('/api/vulnerability-scan/stop/<task_id>', methods=['POST'])
@login_required
def stop_scan(task_id):
    """停止扫描"""
    try:
        if task_id not in scan_tasks:
            return jsonify({'success': False, 'message': '任务不存在'})
        
        scan_tasks[task_id]['status'] = 'stopped'
        scan_tasks[task_id]['message'] = '扫描已停止'
        
        return jsonify({
            'success': True,
            'message': '扫描已停止'
        })
        
    except Exception as e:
        current_app.logger.error(f"停止扫描失败: {str(e)}")
        return jsonify({'success': False, 'message': f'停止扫描失败: {str(e)}'})

@vulnerability_scan_bp.route('/api/vulnerability-scan/history')
@login_required
def get_scan_history():
    """获取扫描历史"""
    try:
        # 返回所有已完成的扫描任务
        history = []
        for task_id, task in scan_tasks.items():
            if task['status'] in ['completed', 'failed', 'stopped']:
                history.append({
                    'task_id': task_id,
                    'target': task['target'],
                    'scan_type': task['scan_type'],
                    'status': task['status'],
                    'start_time': task['start_time'],
                    'results_count': len(task['results'])
                })
        
        # 按时间倒序排列
        history.sort(key=lambda x: x['start_time'], reverse=True)
        
        return jsonify({
            'success': True,
            'history': history
        })
        
    except Exception as e:
        current_app.logger.error(f"获取扫描历史失败: {str(e)}")
        return jsonify({'success': False, 'message': f'获取历史失败: {str(e)}'})

def perform_scan(task_id, target_client_id, target_name, scan_type):
    """执行扫描任务"""
    try:
        task = scan_tasks[task_id]
        
        # 模拟扫描过程
        scan_steps = [
            {'step': '连接客户端', 'progress': 10},
            {'step': '端口扫描', 'progress': 30},
            {'step': '服务识别', 'progress': 50},
            {'step': '漏洞检测', 'progress': 70},
            {'step': '结果分析', 'progress': 90},
            {'step': '生成报告', 'progress': 100}
        ]
        
        results = []
        
        for step_info in scan_steps:
            if task['status'] == 'stopped':
                break
                
            task['message'] = f"正在执行: {step_info['step']}"
            task['progress'] = step_info['progress']
            
            # 模拟扫描时间
            time.sleep(2)
            
            # 模拟发现漏洞
            if step_info['step'] == '漏洞检测':
                if scan_type == 'comprehensive':
                    results.extend([
                        {
                            'vulnerability': 'SQL注入漏洞',
                            'severity': 'high',
                            'description': f'在客户端 {target_name} 上发现潜在的SQL注入点',
                            'location': f'{target_name}/login.php',
                            'recommendation': '使用参数化查询'
                        },
                        {
                            'vulnerability': 'XSS漏洞',
                            'severity': 'medium',
                            'description': f'在客户端 {target_name} 上发现跨站脚本攻击漏洞',
                            'location': f'{target_name}/search.php',
                            'recommendation': '对用户输入进行过滤和转义'
                        }
                    ])
                else:
                    results.append({
                        'vulnerability': '端口开放',
                        'severity': 'low',
                        'description': f'在客户端 {target_name} 上发现开放的服务端口',
                        'location': f'{target_name}:22,80,443',
                        'recommendation': '关闭不必要的端口'
                    })
        
        if task['status'] != 'stopped':
            task['status'] = 'completed'
            task['progress'] = 100
            task['message'] = '扫描完成'
            task['results'] = results
            task['end_time'] = datetime.now().isoformat()
        
    except Exception as e:
        task['status'] = 'failed'
        task['message'] = f'扫描失败: {str(e)}'
        current_app.logger.error(f"扫描任务执行失败: {str(e)}")